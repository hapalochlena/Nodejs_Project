service: friend-reminder
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  # stage: v1 # = versioning of the project, e.g. stage dev / prod
  region: eu-central-1
  # timeout: 30
  # memorySize: 512

plugins:
  - serverless-webpack

# custom:
#   webpack:
#     webpackConfig: 'webpack.config.js' # Name of webpack configuration file
#     includeModules: true # Node modules configuration for packaging
#     # webpackIncludeModules:
#     #   forceInclude:
#     #     - pg
custom:
  webpack:
    excludeFiles:
      - tests/**
      - package.json
      - .env
    includeModules:
      forceInclude:
        - knex
        - pg

package:
  individually: true # we want each lambda to be packaged individually
  excludeDevDependencies: true
  # patterns:
    # - '!node_modules/**'
    # - 'node_modules/serverless-http/**'
    # - 'node_modules/express/**'
    # - 'node_modules/body-parser/**'
    # - 'node_modules/pg/**'
    # - '!tests/**'

# * Remember to place this code within the appropriate section of your serverless.yml file, such as under the functions section if you're associating the layer with a specific function or under the provider section if the layer is meant to be used globally by all functions in your service.
# layers:
#   myLibs:
#     path: layer # * name of your folder
#     compatibleRuntimes:
#       - nodejs18.x

# * RDS database
# ! all of this okay in serverless.yml? actually CloudFormation
resources:
  Resources:
    MyRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgresql
        DBInstanceIdentifier: my-instance # name for the DB instance (if you don't specify a name, AWS CloudFormation generates a unique physical ID)
        DBName: test-db # The name of the database to create when the DB instance is created. If this parameter is not specified, the default postgres database is created in the DB instance
        AllocatedStorage: 20
        DBInstanceClass: db.t3.micro
        EngineVersion: 14.7
        MasterUsername: postgres
        MasterUserPassword: b2YnvAe3dnLt5C # !
        PubliclyAccessible: true
        DBSecurityGroups:
          - Ref: "MySecurityGroup"
    MySecurityGroup:
      Type: AWS::RDS::DBSecurityGroup
      Properties:
        GroupDescription: Allow access to RDS instance
        DBSecurityGroupIngress:
          - CIDRIP: # The IP range to authorize
        # -
        #   EC2SecurityGroupId: "sg-b0ff1111"
        #   EC2SecurityGroupOwnerId: "111122223333"
        # -
        #   EC2SecurityGroupId: "sg-ffd722222"
        #   EC2SecurityGroupOwnerId: "111122223333"
    # MySecurityGroupIngress:
    #   # The AWS::RDS::DBSecurityGroupIngress resource enables ingress to a DB security group using one of two forms of authorization.
    #   # First, you can add EC2 or VPC security groups to the DB security group if the application using the database is running on EC2 or VPC instances.
    #   # Second, IP ranges are available if the application accessing your database is running on the Internet.
    #   Type: AWS::EC2::SecurityGroupIngress
    #   Properties:
    #     GroupId: !Ref MySecurityGroup
    #     IpProtocol: tcp
    #     FromPort: 5432
    #     ToPort: 5432
    #     CidrIp: 0.0.0.0/0

functions:
  # hello: # lambda function called 'hello'
  #   handler: handler.hello # * => lambda handler = the 'hello' function in the 'handler' file
    # layers:
    #   - {Ref: MyLibsLambdaLayer} # * Ref name is generated by TitleCasing the layer name & appending LambdaLayer
  api: # lambda function called 'api'
    handler: src/app.handler # * => lambda handler = the 'handler' function in the 'handler' file
    # layers:
    #   - {Ref: MyLibsLambdaLayer} # * Ref name is generated by TitleCasing the layer name & appending LambdaLayer
    events:
      - httpApi: '*' # API Gateway event; '*' = paths like 'GET /hello'
      # - httpAPi:
      #     path: /users/create
      #     method: get
      # * OTHER EXAMPLE EVENTS:
      # - websocket: $connect
      # - s3: ${env:BUCKET}
      # - schedule: rate(10 minutes)
      # - sns: greeter-topic
      # - stream: ...
    # * ENVIRONMENT (.env):
    # environment:
      # NODE_ENV: development
      # KEY: secret123
      # POSTGRE_DB_USER: postgres
      # POSTGRE_DB_PASSWORD: pw123
      # ...

# layers:
#   CommonUtil:
#     name: ${opt:stage}-common-layer-test
#     description: Holds common utils - stage ${opt:stage}
#     # path: ../lambda-layers
#     comptabileRuntimes: nodejs18.x
#     package:
#       include:
#         - node_modules/**
