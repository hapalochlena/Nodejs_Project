service: friend-reminder
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs18.x
  # stage: v1 # = versioning of the project, e.g. stage dev / prod
  region: eu-central-1
  # timeout: 30
  # memorySize: 512
  environment:
    RDS_PASSWORD: ${env.RDS_PASSWORD}
  #! IAM ROLE POLICY ATTACHMENT: Deployed it once with the red lines commented in to attach the policy to the lambda. Then added the 'vpv' part under 'functions', commented the red lines here out because of conflict, and deployed again.
  #! iam:
  #!   role:
      #* From Serverless doc:
      # statements:
        # # Allow functions to list all buckets
        # - Effect: Allow
        #   Action: 's3:ListBucket'
        #   Resource: '*'
        # # Allow functions to read/write objects in a bucket
        # - Effect: Allow
        #   Action:
        #     - 's3:GetObject'
        #     - 's3:PutObject'
        #   Resource:
        #     - 'arn:aws:s3:::my-bucket-name/*'
        #* My 1st attempt:
        # # Allow functions to join VPC
        # - Effect: Allow
        #   Action:
        #     - "iam:PassRole"
        #   Resource:
        #     - "arn:aws:iam::577578430541:role/AWSLambdaVPCAccessExecutionRole"
      #* My 2nd attempt:
      #! managedPolicies:
      #!   - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
        # 'arn:aws:iam::789763425617:policy/someteam/MyManagedPolicy-3QUG1777293EJ'
        # 577578430541
        # This configuration will attach the AWSLambdaVPCAccessExecutionRole managed policy to the IAM role that the Serverless Framework automatically creates for your service.
        # This IAM role is used by all the functions in your service, including the existing ones.
        # The AWSLambdaVPCAccessExecutionRole is a managed policy provided by AWS that grants permissions for Lambda functions to be executed within a VPC.

plugins:
  - serverless-webpack

# custom:
#   webpack:
#     webpackConfig: 'webpack.config.js' # Name of webpack configuration file
#     includeModules: true # Node modules configuration for packaging
#     # webpackIncludeModules:
#     #   forceInclude:
#     #     - pg
custom:
  webpack:
    excludeFiles:
      - tests/**
      - package.json
      - .env
    includeModules:
      forceInclude:
        - knex
        - pg

package:
  individually: true # we want each lambda to be packaged individually
  excludeDevDependencies: true
  # patterns:
    # - '!node_modules/**'
    # - 'node_modules/serverless-http/**'
    # - 'node_modules/express/**'
    # - 'node_modules/body-parser/**'
    # - 'node_modules/pg/**'
    # - '!tests/**'

# * Remember to place this code within the appropriate section of your serverless.yml file, such as under the functions section if you're associating the layer with a specific function or under the provider section if the layer is meant to be used globally by all functions in your service.
# layers:
#   myLibs:
#     path: layer # * name of your folder
#     compatibleRuntimes:
#       - nodejs18.x

resources:
  Resources:
    MyRDSInstanceSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupDescription: 'Security Group for RDS Instance'
        SecurityGroupIngress:
          - IpProtocol: 'tcp'
            FromPort: 5432 # = PostgreSQL
            ToPort: 5432
            CidrIp: '0.0.0.0/0'
        VpcId: 'vpc-0e3ef276e98a63c5a'
    MyRDSInstance:
      Type: AWS::RDS::DBInstance
      Properties:
        Engine: postgres
        DBInstanceIdentifier: friend-reminder-db # name for the DB instance (if you don't specify a name, AWS CloudFormation generates a unique physical ID)
        DBName: friend_reminder_db # The name of the database to create when the DB instance is created. If this parameter is not specified, the default postgres database is created in the DB instance
        AllocatedStorage: "20" # ! string
        DBInstanceClass: db.t3.micro
        EngineVersion: "14.7" # ! string
        MasterUsername: postgres
        MasterUserPassword: RDS_PASSWORD # !
        PubliclyAccessible: true
        VPCSecurityGroups: # For DB instances in a VPC, you should use the VPCSecurityGroups property instead of DBSecurityGroups.
          - !GetAtt MyRDSInstanceSecurityGroup.GroupId
        # DBSecurityGroups: # ! The DBSecurityGroups property is used for DB instances that are not in a VPC.
        #   - !Ref MyRDSInstanceSecurityGroup
    # MySecurityGroup:
    #   Type: AWS::RDS::DBSecurityGroup
    #   Properties:
    #     GroupDescription: Allow access to RDS instance
    #     DBSecurityGroupIngress:
    #       -
    #         # CIDRIP: String # The IP range to authorize.
    #         EC2SecurityGroupName: default # Name of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    #         # EC2SecurityGroupId: sg-08d6b05ea8b61959f # Id of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    #         EC2SecurityGroupOwnerId: "577578430541" # AWS account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The AWS access key ID isn't an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided.
    #         # * values taken from the 'default' security group that was automatically created when manually creating a free-tier RDS db instance following a tutorial
    #         # * 'default' sg => Your AWS account automatically has a default security group for the default VPC in each Region.
    #         # * all inbound traffic blocked by default; all outbound traffic authorised by default
    LambdaSecurityGroup:
      Type: 'AWS::EC2::SecurityGroup'
      Properties:
        GroupName: 'LambdaSecurityGroup'
        GroupDescription: 'Security Group for Lambda Function'
        SecurityGroupIngress:
          - IpProtocol: 'tcp'
            FromPort: 443 # 443 = HTTPS
            ToPort: 443
            CidrIp: '0.0.0.0/0' # '0.0.0.0/0' is a CIDR notation that represents all possible IP addresses, meaning this rule allows traffic from any IP address.
        SecurityGroupEgress:
          - IpProtocol: 'tcp'
            FromPort: 5432 # = PostgreSQL
            ToPort: 5432
            DestinationSecurityGroupId: !GetAtt MyRDSInstanceSecurityGroup.GroupId
        VpcId: 'vpc-0e3ef276e98a63c5a'

functions:
  # hello: # lambda function called 'hello'
  #   handler: handler.hello # * => lambda handler = the 'hello' function in the 'handler' file
    # layers:
    #   - {Ref: MyLibsLambdaLayer} # * Ref name is generated by TitleCasing the layer name & appending LambdaLayer
  api: # * NAME of the Lambda function
    handler: src/app.handler # * => lambda handler = the 'handler' function in the 'handler' file
    # layers:
    #   - {Ref: MyLibsLambdaLayer} # * Ref name is generated by TitleCasing the layer name & appending LambdaLayer
    events:
      - httpApi: '*' # * API Gateway event; '*' = paths like 'GET /hello' = in this case: all paths
      # - httpAPi:
      #     path: /users/create
      #     method: get
      # * OTHER EXAMPLE EVENTS:
      # - websocket: $connect
      # - s3: ${env:BUCKET}
      # - schedule: rate(10 minutes)
      # - sns: greeter-topic
      # - stream: ...
    vpc:
      securityGroupIds:
        - !Ref LambdaSecurityGroup
      subnetIds:
        - 'subnet-04a4274a3679ac2bf'
        - 'subnet-007b74feadb13351e'
        - 'subnet-0de25b955403ac627'
    # * ENVIRONMENT (.env):
    # environment:
      # NODE_ENV: development
      # KEY: secret123
      # POSTGRE_DB_USER: postgres
      # POSTGRE_DB_PASSWORD: pw123
      # ...

# layers:
#   CommonUtil:
#     name: ${opt:stage}-common-layer-test
#     description: Holds common utils - stage ${opt:stage}
#     # path: ../lambda-layers
#     comptabileRuntimes: nodejs18.x
#     package:
#       include:
#         - node_modules/**
